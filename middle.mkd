# Introduction

Incremental zone transfer (IXFR, [](#RFC1995)) was introduced to efficiently
transfer changed portions of a zone. However, when a zone is signed with
DNSSEC [](#RFC4033), [](#RFC4034), [](#RFC4035), the transfer may still
become very large. For example, when many resource record sets (RRsets) need
a re-sign, or when the NSEC3 [](#RFC5155) salt is changed, an IXFR may
become larger than a full zone transfer (AXFR, [](#RFC5936)). This is because
the IXFR includes complete copies of both the deleted and replacement RRSIG
records.

To keep the deltas small in zone transfers, we need to have a richer
update syntax, for example like in Dynamic Update (DNS UPDATE, [](#RFC2136).
This document introduces a new query type MIXFR (minimal incremental zone
transfer) that is able to express this richer syntax.

An earlier proposal to keep the zone transfers small is
IXFR-ONLY [](#IXFR-ONLY), by giving the client an oppurtunity to signal
the server that it prefers an error above a fall back to an AXFR in case the
server is not able to send an IXFR. However IXFR-ONLY does not reduce
the size of an IXFR.

# Definitions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [](#RFC2119).

# Syntax

The syntax for IXFR is a subset of MIXFR. The richer syntax of MIXFR allows to
add or delete multiple records with one resource record (RR).

## Add an RR

This works the same as with IXFR.

## Delete an RR

This works the same as with IXFR.

## Delete an RRset

Similar to DNS UPDATE. To delete an RRset, the MIXFR deletion list
includes an RR whose NAME and TYPE are those of the RRset to be
deleted. CLASS must be specified as ANY. RDLENGTH must be zero (0) and
RDATA must therefore be empty.

## Delete All RRsets on a Name

Similar to DNS UPDATE. To delete all RRSets at a name, the MIXFR
deletion list includes an RR at that NAME, whose TYPE must be
specified as ANY and CLASS must be specified as ANY. RDLENGTH must be
zero (0) and RDATA must therefore be empty.

## Delete All RRsets of a Type

The MIXFR deletion list includes an RR whose NAME is that of the apex
of the zone. TYPE must be specified as the TYPE of the RRsets to be
deleted. CLASS must be specified as ANY. RDLENGTH must be zero (0) and
RDATA must therefore be empty.

## Replace an RRset

The MIXFR addition list includes an RR whose NAME and TYPE are those of
the RRset to be replaced. CLASS must be specified as ANY. RDLENGTH
must be non-zero and the RDATA is that of the first replacement
record.

If an RRset is to be replaced with multiple records, the second and
subsequent records MUST use the syntax for adding an RR.

The same syntax is used to delete an RRset and to replace an RRset
with an RR whose RDLENGTH is zero. This is not ambiguous because the
former appears in the deletion list (before the new SOA RR) and the
latter appears in the addition list (after the new SOA RR).

# Protocol Description

## Client side

The client can send a MIXFR request. Just like with IXFR, it places a SOA
RR in the authority section to signal the version of the zone it holds now.
If the client does not want the server to fall back to AXFR, it MAY add
another SOA RR in the additional section. This achieves MIXFR-only behavior, 
similar to IXFR-ONLY [](#IXFR-ONLY). For example:

    ;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 1337
    ;; flags: qr ; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1
    ;; QUESTION SECTION:
    ;; example.    IN    MIXFR
    
    ;; AUTHORITY SECTION:
    example.       IN    SOA    serial=1
    
    ;; ADDITIONAL SECTION:
    example.       IN    SOA    serial=1
^[fig:a-MIXFR-request::A MIXFR request for the "example." zone.]

## Server side

A server receiving a minimal incremental zone transfer (MIXFR) request will
reply with a MIXFR. A MIXFR looks exactly like an IXFR, except there may be
zero or more of the new introduced syntax RRs that can add or delete more
records. For the zone `example.`, the following zone transfer can be sent
that will replace all signatures in the zone with new signatures for the
names `example.`, `a.example.`, `b.example.` and `c.example.`:

    ;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 1337
    ;; flags: qr ; QUERY: 1, ANSWER: 9, AUTHORITY: 0, ADDITIONAL: 0 
    ;; QUESTION SECTION:
    ;; example.    IN    MIXFR
    
    ;; ANSWER SECTION:
    example.       IN    SOA    serial=3
    example.       IN    SOA    serial=1
    example.       ANY   RRSIG
    example.       IN    SOA    serial=3
    example.       IN    RRSIG  rdata
    a.example.     IN    RRSIG  rdata
    b.example.     IN    RRSIG  rdata
    c.example.     IN    RRSIG  rdata
    example.       IN    SOA    serial=3   
^[fig:a-MIXFR-response::A MIXFR response for the "example." zone.]

The server MAY reply with an IXFR or AXFR instead. If the server does
not implement MIXFR it MUST return a response with NOTIMPL rcode. The client
MUST fallback to request IXFR or AXFR.

# Data Minimization

The proposal described in the previous section significantly reduces the size
of a zone transfer compared with IXFR. However, when a zone has changed its
NSEC3 salt, the impact is less impressive. This is because you need to
remove all NSEC3 records and all its corresponding signatures. The first
part is achieved with:

    example.       ANY   NSEC3
^[fig:delete-all-nsec3::Record to delete all RRsets of type NSEC3.]

But we can't do the same for part two, because there are other signatures
than those covering type NSEC3.

However, because RRSIG records are tightly related to its RRset we can
introduce some additional data minimization rules.

## Implicit RRSIG deletion

When an RR or RRset is deleted or replaced, the MIXFR client MUST also
remove all existing RRSIG records on that RRset. This is valid for all
RRtypes except RRSIG itself.

## More optimizations

We can optimize the transfer even more, because when adding an RRset we
duplicate a lot of owner names, class and type fields. For example. we could
add an NS RRset of three records like this:

    ADD example. IN NS 3 ns1.example. ns2.example. ns3.example.
^[fig:add-ns-rrset::Optimized addition of an NS RRset.]

With such a syntax, we can do more things like

    REPLACE       <name> <type> <n> <rdata>{n}
    REPLACE-RRSIG <name> <type> <n> <rdata>{n}
    SOA           <serial>
^[fig:optimized-xfr::Optimized syntax ideas for MIXFR.]

## A more sophisticated grammar

    REPLACE-RRSIG name <type> <n> <rdata>+ 
    DEL NSEC3 <nsec3param info> ? 
    REPLACE NSEC3PARAM 
    REPLACE-NS <name> <n> <rdata>+
    GLUE <name> <type> <n> <rdata>+
    SOA <serial>
^[fig:sophisticated-grammar::More optimizations syntax ideas for MIXFR.]

Idea: the whole way to RRset 

    ADD <type> <n> <m> <Rdata>+n  <RRSIG>+m 
    REPLACE <type> <n><m><Rdata>*n <RRSIG>*m 
    if only signature then n = 0 
^[fig:whole-rrset::And more optimizations syntax ideas for MIXFR.]

Strictly speaking we can save a few bytes by doing the following in RRSIG: 

    KEY <alg><lables><origTTL><end-time><start-time><key-id><signer>

now the RRSIG parts only need to re real signature. 

# IANA Considerations

IANA should assign the RR type value [TBD] (decimal) for MIXFR.

# Security Considerations

This document does not introduce additional security considerations.

# Acknowledgements

Johan Ihren, Tony Finch.

# Changelog

## 00

* Initial document.
